- JDK
- JRE

- Java虚拟机和Java语言没有必然联系，只与特定的二进制文件：Class文件有关，任何语言只要可以编译成Class文件，就可以被Java
  虚拟机识别并执行。Java虚拟机可以执行Kotlin、Groovy等语言

- Java虚拟机结构
   - 运行时数据区域
        - 方法区
        - Java虚拟机区
        - 本地方法区
        - Java堆
        - 程序计数器
   - 执行引擎
        - 即时编译器
        - 垃圾回收器
   - 本地库接口
   - 本地方法库

- Class 文件结构
   - 纵向来看，Class文件只有两种数据：无符号数和表
      - 无符号数  属于基本的数据类型，以 u1、u2、u4、u8 来分别代表 1 个字节、2 个字节、4个字节和8个字节的无符号数，
                 无符号数可以用来描述数字、索引引用、数量值或者字符串（UTF-8 编码）。
      - 表  表是由多个无符号数或者其他表作为数据项构成的复合数据类型，class文件中所有的表都以“_info”结尾。其实，
            整个 Class 文件本质上就是一张表。

   - Class文件结构

      - 无符号数和表就组成了 class 中的各个结构。这些结构按照预先规定好的顺序紧密的从前向后排列，相邻的项之间没有
        任何间隙
        - 魔数            magic number         u4     固定值，判断当前文件是否是能被Java虚拟机处理的Class文件
        - 版本号          major version        u2     主版本号 / minor version        u2     副版本号
        - 常量池
             - constant pool count 常量池大小  u2
             - constant_pool        常量池    cp_info
        - 访问标志        access_flag          u2
        - 类、父类、接口
             - 当前类索引    this_class         u2
             - 父类索引      super_class        u2
        - 字段描述集合
             - 字段索引集合大小  fields_count    u2
             - 字段索引集合     field_info          field_info
        - 方法描述集合
             - 方法索引集合大小   methods_count   u2
             - 方法索引集合      methods          method_info
        - 属性描述集合
             - 属性索引集合大小   attributes_count  u2
             - 属性索引集合      attributes         attribute_info

    - Class 规范

      - 1 开始四个字节是Class文件的魔数，一个固定值
      - 2 紧随其后的是版本号，用四个字节表示，前两个字节是 副版本号，后两个字节是主版本号
               - 如 00 00 00 34 前两字节表示0，后两个字节转换成10进制是52，对应的Java版本号是52.0
      - 3 常量池（重点）
      - 4 访问标志（access_flags）
           - 紧跟常量池之后的是访问标志，占用两个字节
           - 描述该类是类还是接口，若是类，是否被final定义；是否被定义为public，是否是abstract
               - ACC_PUBLIC     0x0001  public 类型
               - ACC_FINAL      0x0010  被声明为final类型的类
               - ACC_SUPER      0x0020
               - ...
      - 5 类索引、父类索引、接口索引计数器
           - 访问标志后2个字节是类索引，类索引之后的两个字节是父类索引、其次是接口索引计数器
           - 类索引和父类索引值表示的是指向常量池中第几个常量，而接口索引计数器值表示当前类实现了几个接口，父类索引之后
             的（接口索引计数值）个位将是接口
      - 6 字段表
           - 紧跟在接口索引集合后面的就是字段表了，字段表的主要功能是用来描述类或者接口中声明的变量。
           - 这里的字段包含了类级别变量以及实例变量，但是不包括方法内部声明的局部变量
           - 字段表集合之前还是使用一个计数器来表示变量的个数
           - 字段计数器之后会紧跟着 N 个字段表的数据结构
      - 7 字段访问标志
           - Java 类中的变量，也可以使用 public、private、final、static 等标识符进行标识，因此解析字段时，
             需要先判断它的访问标志。
             - 字段表集合中不会列出从父类或者父接口中继承而来的字段
             - 内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段
      - 8 方法表
           - 字段表之后跟着的就是方法表常量
      - 9 属性表

- 类的生命周期

   - 类的生命周期阶段包括：加载、链接、初始化、使用和加载，其中链接又包括验证、准备和解析
         - 加载  查找并加载Class文件
         - 链接  包括验证、准备和解析
                 - 验证 确保被导入类型的正确性
                 - 准备 为类的静态字段分配字段，并用默认值初始化这些字段
                 - 解析 虚拟机将常量池内的符号引用替换为直接引用
         - 初始化 将类变量初始化为正确的初始值


- 类加载子系统

   - 有多种类加载器来查找Class文件到Java虚拟机中；Java虚拟机有两种类加载器：系统、自定义加载器。其中系统加载器包括
     以下三种：
        - 1 Bootstrap Classloader 引导类加载器 由C/C++实现，加载特定目录Class
        - 2 Extensions Classloader 扩展类加载器 加载Java的扩展类，加载如下目录中文件：
             - JAVA_HOME/jre/lib/ext
             - java/ext.dir指定的目录
        - Application ClassLoader 应用程序类加载器
             - 当前应用的Classpath目录
             - 系统属性的java.class.path指定的目录

        - 自定义类加载器 是通过继承java.lang.ClassLoader实现的自己的类加载器


- 运行时数据区域

  - 程序计数器
       - 又称PC寄存器，确定下一条指令的地址，保证程序能连续执行
       - 每个线程都有一个独立的程序计数器，因此程序计数器线程私有。程序计数器会保存正在执行的字节码指令地址
  - Java虚拟机栈
       - 每个Java虚拟机线程都有一个Java虚拟机栈，其生命周期与线程相同，与线程同时创建。虚拟机栈存储Java方法
         调用的状态(局部变量、参数，返回值，运算的中间结果等)
       - Java虚拟机栈包含多个栈帧，一个栈帧会存储局部变量表，操作数栈、动态链接，方法出口灯信息
       - 调用一个Java方法时，虚拟机压入一个新的栈帧都该线程的栈内存，直至方法执行完毕从栈中弹出
  - 本地方法栈

  - Java堆
       - 所有线程共享的运行时内存区域
       - 存放对象实例，堆中的对象被垃圾收集器管理
       - Java堆可以分为新生代、老年代
  - 方法区
       - 所有线程共享，存储已被Java虚拟机加载的类结构信息，包括运行时常量、字段和方法信息、静态变量等数据
       - 方法区是Java堆的逻辑组成部分
  - 运行时常量池
       - 不属于运行时数据区域，而是方法区的一部分
       - 存储编译时期生成的字面量和符号引用
       - 可以理解为类、接口的常量池运行时的表现形式
















